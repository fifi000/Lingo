@page "/serie/{serieId:int}"

@inject TmdbManager TmdbManager
@inject SetData SetData

<div>

	@if (Serie is null)
	{
		<LoadingSpinner />
	}
	else
	{
		<div class="navbar mb-2">
			<SerieInfoCard Serie=Serie/>
		</div>

		<nav class="bg-white top-0 position-sticky border rounded-bottom mb-3" style="z-index: 1020; --bs-bg-opacity: .95" aria-label="Seasons Navigation">
			<div class="pagination d-flex flex-wrap justify-content-center p-2">
				@foreach (var season in Serie.Seasons)
				{
					<div class="page-item @((_currentSeasonNumber == season.Number) ? "active" : "")" @onclick="() => _currentSeasonNumber = season.Number">
						<a class="page-link user-select-none">@season.Number</a>
					</div>
				}
			</div>
		</nav>

		<div>
			<div class="container-lg-fluid mb-4">
				<div class="row row-cols-1 g-4 row-cols-xl-4 row-cols-lg-3 row-cols-md-2 row-cols-sm-1">
					@*@if (_currentSeason is not null && _currentSeason is not null)*@
					@if (_currentSeason?.Episodes is not null)
					{
						@foreach (var episode in _currentSeason.Episodes)
						{
							<EpisodeInfoCard Episode="episode" HasWords="_episodeIdsWithSubtitles.Contains(episode.Id)" />
						}
					}
					else
					{
						<LoadingSpinner />
					}
				</div>
			</div>
		</div>
	}
</div>


@code {
	[Parameter]
	public int SerieId { get; set; }

	public SerieModel Serie { get; set; }

	private SeasonModel _currentSeason => Serie.Seasons.FirstOrDefault(x => x.Number == _currentSeasonNumber);
	private int _currentSeasonNumber;
	private List<int> _episodeIdsWithSubtitles;

	protected async override Task OnInitializedAsync()
	{
		Serie = await TmdbManager.GetSerieByIdAsync(SerieId);
		_currentSeasonNumber = Serie.Seasons.First().Number;
		
		var tasks = Serie.Seasons.Select(x => LoadEpisodesAsync(x));
		await Task.WhenAll(tasks);

		_episodeIdsWithSubtitles = SetData.GetAllSets().Select(x => x.EpisodeId).ToList();
	}

	private async Task LoadEpisodesAsync(SeasonModel season)
	{
		season.Episodes = await TmdbManager.GetEpisodesAsync(Serie.Id, season.Number);
	}
}
