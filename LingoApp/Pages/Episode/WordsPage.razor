@page "/words/{episodeId:int}"
@using Newtonsoft.Json;

@inject SetData SetData
@inject OpenSubtitlesManager OpenSubtitlesManager
@inject OpenAiManager OpenAiManager

<h3>Words</h3>

@if (_pageStatus == PageStatus.Loading)
{
	<LoadingSpinner />
}
else if (_pageStatus == PageStatus.NoResultsFound)
{
	<NoResultsAlert />
}
else if (_pageStatus == PageStatus.FoundResults)
{
	<table class="table table-hover overflow-auto">
		<thead class="position-sticky sticky-top table-secondary">
			<tr>
				<th scope="col">#</th>
				<th scope="col">Original</th>
				<th scope="col">Translation</th>
				<th scope="col">
					<div class="d-flex justify-content-end">
						<div class="btn-group btn-group-sm">
							@if (_pageMode == Mode.Base)
							{
								<button class="btn btn-warning" @onclick="TurnOnEditMode"><span class="oi oi-pencil"></span></button>
								<button class="btn btn-danger" @onclick="TurnOnRemoveMode"><span class="oi oi-x"></span></button>
							}
							else if (_pageMode == Mode.Edit)
							{
								<button class="btn btn-warning" @onclick="() => TurnOffEditMode(false)">Dismiss</button>
								<button class="btn btn-success" @onclick="() => TurnOffEditMode(true)"><span class="oi oi-check"></span></button>
							}
							else if (_pageMode == Mode.Remove)
							{
								<button class="btn btn-warning" @onclick="() => TurnOffRemoveMode(false)">Dismiss</button>
								<button class="btn btn-primary" @onclick="HandleSelectAll">Select All</button>
								<button class="btn btn-danger" @onclick="() => TurnOffRemoveMode(true)">Delete</button>
							}

						</div>
					</div>
				</th>
			</tr>
		</thead>
		<tbody>
			@if (_pageMode == Mode.Edit)
			{
				<tr class="table-info">
					<th>0</th>
					<td><input class="form-control" style="max-width: 10rem" @bind-value="@_newWord.Original" /></td>
					<td><input class="form-control" style="max-width: 10rem" @bind-value="@_newWord.Translation" /></td>
					<td class="text-end"><button class="btn btn-success btn-sm rounded-circle" @onclick="AddNewWord"><span class="oi oi-plus"></span></button></td>				
				</tr>
			}
			@foreach (var (word, i) in _set.Words.Select((word, i) => (word, i)))
			{
				<tr @onclick="() => AddWordToRemove(word)">					
					<th>@(i+1)</th>
					@if (_pageMode == Mode.Edit)
					{
						<td><input class="form-control" style="max-width: 10rem" @bind-value="@word.Original" /></td>
						<td><input class="form-control" style="max-width: 10rem" @bind-value="@word.Translation" /></td>
					}
					else
					{
						<td>@word.Original</td>
						<td>@word.Translation</td>						
					}

					@if (_pageMode == Mode.Remove)
					{
						<td class="text-end">
							<input class="form-check-input" type="checkbox" @bind="_wordsToRemove[i].Remove"
								   @onclick="() => HandleWordsToRemove(word)"/>						
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}



@code {

	class WordRemove
	{
		public WordModel Word { get; set; }
		public bool Remove { get; set; }
	}

	[Parameter]
	public int EpisodeId { get; set; }

	private SetModel _set;
	private List<WordRemove> _wordsToRemove;
	private string _tempSet;
	private WordModel _newWord;

	private PageStatus _pageStatus;
	private Mode _pageMode = Mode.Base;

	protected async override Task OnParametersSetAsync()
	{
		_pageStatus = PageStatus.Loading;

		if (EpisodeId == 0)
		{
			Debug.WriteLine("Invalid episodeId");
		}

		// check if a set with words is already created
		// for this specific episode
		_set = SetData.GetSet(EpisodeId);

		if (_set is not null)
		{
			_pageStatus = PageStatus.FoundResults;
			return;
		}

		try
		{
			// get subtitles
			var subtitles = await OpenSubtitlesManager.GetSubtitles(EpisodeId);

			// reformat subtitles
			var lines = Helper.FormatSubtitles(subtitles);

			// call chat
			var words = await OpenAiManager.GetWords(lines);

			// create set
			_set = new()
			{
				Words = words,
				EpisodeId = EpisodeId
			};

			// save set to db
			SetData.CreateSet(_set);
			_pageStatus = PageStatus.FoundResults;
		}
		catch (Exception)
		{
			_pageStatus = PageStatus.NoResultsFound;
			return;
		}

	}

	private void TurnOnEditMode()
	{
		_newWord = new();

		// save Set state before changes
		_tempSet = JsonConvert.SerializeObject(_set);				

		_pageMode = Mode.Edit;
	}

	private void TurnOffEditMode(bool save)
	{	
		if (save)
		{
			// save changes
			SetData.UpdateSet(_set);
		}
		else
		{
			// revert sate before changes
			_set = JsonConvert.DeserializeObject<SetModel>(_tempSet);			
		}

		_pageMode = Mode.Base;
	}

	private void AddNewWord()
	{
		_set.Words.Insert(0, _newWord);
		_newWord = new();
	}

	private void TurnOnRemoveMode()
	{
		_wordsToRemove = _set.Words.Select(x => new WordRemove { Word = x, Remove = false }).ToList();
		_pageMode = Mode.Remove;
	}

	private void TurnOffRemoveMode(bool save)
	{
		if (save)
		{
			if (_wordsToRemove.All(x => x.Remove))
			{
				SetData.DeleteSet(_set.EpisodeId);
				_set.Words = new();
			}
			else
			{
				_wordsToRemove.Where(x => x.Remove).ToList().ForEach(x => _set.Words.Remove(x.Word));
				SetData.UpdateSet(_set);
			}
		}

		_pageMode = Mode.Base;
	}

	private void HandleWordsToRemove(WordModel word)
	{
		var wordToRemove = _wordsToRemove.First(x => x.Word == word);
		wordToRemove.Remove = !wordToRemove.Remove;
	}

	private void AddWordToRemove(WordModel word)
	{
		if (_pageMode != Mode.Remove)
		{
			return;
		}

		_wordsToRemove.First(x => x.Word == word).Remove ^= true;
	}

	private void HandleSelectAll()
	{
		bool allSelected = _wordsToRemove.All(x => x.Remove);
		_wordsToRemove.ForEach(x => x.Remove = !allSelected);
	}
}
