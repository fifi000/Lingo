@page "/words/{episodeId:int}"

@inject SetData SetData
@inject OpenSubtitlesManager OpenSubtitlesManager
@inject OpenAiManager OpenAiManager

<h3>Words</h3>

@if (_pageStatus == PageStatus.Loading)
{
	<LoadingSpinner />
}
else if (_pageStatus == PageStatus.NoResultsFound)
{
	<NoResultsAlert />
}
else if (_pageStatus == PageStatus.FoundResults)
{
	<table class="table table-hover">
		<thead>
			<tr>
				@*<th scope="col">#</th>*@
				<th scope="col">English</th>
				<th scope="col">Polish</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var pair in Set.Words)
			{
				<tr>
					<td>@pair.English</td>
					<td>@pair.Polish</td>
				</tr>
			}
		</tbody>
	</table>
}



@code {

	[Parameter]
	public int EpisodeId { get; set; }	

	public SetModel Set { get; set; }

	private PageStatus _pageStatus;

	protected async override Task OnParametersSetAsync()
	{
		_pageStatus = PageStatus.Loading;

		if (EpisodeId == 0)
		{
			Debug.WriteLine("Invalid episodeId");
		}

		// check if a set with words is already created
		// for this specific episode
		Set = SetData.GetSet(EpisodeId);

		if (Set is not null)
		{
			_pageStatus = PageStatus.FoundResults;
			return;
		}

		try
		{
			// get subtitles
			var subtitles = await OpenSubtitlesManager.GetSubtitles(EpisodeId);

			// reformat subtitles
			var lines = Helper.FormatSubtitles(subtitles);

			// call chat
			var words = await OpenAiManager.GetWords(lines);

			// create set
			Set = new()
			{
				Words = words,
				EpisodeId = EpisodeId
			};

			// save set to db
			SetData.CreateSet(Set);
		}
		catch (Exception)
		{
			_pageStatus = PageStatus.NoResultsFound;
			return;
		}
	}
}
