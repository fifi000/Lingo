@page "/"

@inject NavigationManager NavigationManager
@inject TmdbManager TmdbManager
@inject SerieSearchData SerieSearchData

<div class="container-fluid py-4">
	@if (_pageStatus == PageStatus.Loading)
	{
		<LoadingSpinner />
	}
	else if (_pageStatus == PageStatus.NoResultsFound)
	{
		<NoResultsAlert />
	}
	else if (_pageStatus == PageStatus.FoundResults)
	{
		<div class="container-lg-fluid my-4">
			<div class="row row-cols-1 g-4 row-cols-xl-2 row-cols-md-1 row-cols-sm-1">
				@foreach (var serie in Series)
				{
					<div class="mb-3" @onclick="() => OnSerieSelection(serie)">
						<SerieInfoCard Serie=serie/>
					</div>
				}
			</div>
		</div>
	}

	@if (SeriesSearched?.Count > 0)
	{
		<div class="container-fluid border rounded pt-3 px-0">
			<h3 class="px-3 mb-3">Last searched</h3>
			<div class="d-flex overflow-auto px-3">
				@foreach (var serie in SeriesSearched)
				{
					<LastSearchedSerie Serie="serie" OnSerieSelection="OnSerieSelection" OnSerieRemove="RemoveSearchedSerie" />
				}
			</div>
		</div>
	}
</div>

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string SearchPhrase { get; set; }

	public List<SerieModel> Series { get; set; } = new();
	public List<SerieModel> SeriesSearched { get; set; } = new();

	private PageStatus _pageStatus;

	protected async override Task OnParametersSetAsync()
	{
		if (SearchPhrase is not null)
		{
			await SearchSeries();
		}

		var lastSearchedSerieIds = SerieSearchData.GetAllSearchedSeries(8);
		if (lastSearchedSerieIds.Count == 0) return;

		SeriesSearched = new();

		var tasks = lastSearchedSerieIds.Select(x => TmdbManager.GetSerieById(x));

		SeriesSearched = (await Task.WhenAll(tasks)).ToList();

		if (SearchPhrase is null) _pageStatus = PageStatus.Basic;
	}

	private void OnSerieSelection(SerieModel serie)
	{
		SerieSearchData.UpsertSerie(serie.Id);

		NavigationManager.NavigateTo($"/serie/{serie.Id}");
	}

	private void RemoveSearchedSerie(SerieModel serie)
	{
		SeriesSearched.Remove(serie);
		SerieSearchData.DeleteSerie(serie.Id);
	}

	private async Task SearchSeries()
	{
		_pageStatus = PageStatus.Loading;

		Series = await TmdbManager.GetSeriesByName(SearchPhrase);

		_pageStatus = (Series.Count > 0) ? PageStatus.FoundResults : PageStatus.NoResultsFound;
	}
}